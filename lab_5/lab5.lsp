; 1. Напишите функцию, которая уменьшает на 10 
; все числа из списка-аргумента этой функции, проходя по верхнему уровню списковых ячеек. 
; (Список смешанный структурированный)

(defun f1 (lst)
    (mapcar #'(lambda (x) (- x 10)) 
            lst
    )
)
; (format t "~a~%" ( f1 '(10 21 32)))  ; --> (0 11 22)

(defun f1* (lst)
    (mapcar #'(lambda (x) 
                (cond   ((numberp x)
                            (- x 10))
                        (T x))) 
            lst
    )
)
; (format t "~a~%" ( f1* '(10 21)))   ; --> (0 11)
; (format t "~a~%" ( f1* '(a (b c) 10)))   ; --> (a (b c) 0)
; (format t "~a~%" ( f1* '(10 21 (3 d) 200 a 1)))  ; --> (0 11 (3 D) 190 A -9)

; 2. Написать фукнцию которая получает как аргумент 
; список чисел, а возвращает список квадратов этих чисел в том же порядке
(defun f2 (lst)
    (mapcar #'(lambda (x)
                (* x x))
            lst)
)
; (format t "~a~%" ( f2 '(1 2 3 4 5)))    ; --> (1 4 9 16 25)


























; 3. Напишите фукнцию, которая умножает на заданное
; число-аргумент все числа из заданного списка-аргумента, когда
; а) все элементы списка -- числа,
; б) элементы списка -- любый объекты.

; а) все элементы списка -- числа,
(defun f3a (lst num)
    (cond   (   (every  #'numberp lst)
                (mapcar #'(lambda (x) (* x num)) lst))
    )
)
; (format t "~a~%" ( f3a '(1 2 3 4 5) 2))     ; --> (2 4 6 8 10)
; (format t "~a~%" ( f3a '(1 2 3 4 5 d) 2))   ; --> NIL


; б) элементы списка -- любый объекты.
(defun f3b (lst num)
    (mapcar #'(lambda (x)
                (cond ((numberp x)
                            (* x num))
                        (T x)))
                lst)
)
; (format t "~a~%" ( f3b '(1 2 a b 5) 2))     ; --> ( 2 4 a b 10)
; (format t "~a~%" ( f3b '(a) 2))   ; --> (a)














